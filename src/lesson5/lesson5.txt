Структура Java-программы:
Java-программы содержат в себе четыре разновидности блоков:
классы (classes),
методы(methods),
переменные(variables),
пакеты(package).

--------------------------- Пакеты, Импорт пакетов и классов, Статический импорт------------------------------------------------------------

Пакеты позволяют организовать классы логически в наборы.
Организация классов в виде пакетов позволяет избежать конфликта имен между классами.
Чтобы указать, что класс принадлежит определенному пакету, надо использовать директиву package, после которой указывается имя пакета:
package название_пакета;
Названия пакетов соответствуют физической структуре проекта, то есть организации каталогов, в которых находятся файлы с исходным кодом.
А путь к файлам внутри проекта соответствует названию пакета этих файлов.
Например, если классы принадлежат пакету somePack, то эти классы помещаются в проекте в папку somePack.

Классы необязательно определять в пакеты.
Если для класса пакет не определен, то считается, что данный класс находится в пакете по умолчанию, который не имеет имени.

Импорт пакетов и классов:
Если необходимо использовать классы из других пакетов, то нужно подключить эти пакеты и классы.
Например, import java.util.Scanner;

Директива import указывается в самом начале кода, после чего идет имя подключаемого класса.

Чтобы не подключать по отдельности каждый класс, мы можем сразу подключить весь пакет и использовать любой класс из пакета java.util:
Например, import java.util.*;

Статический импорт:
В java есть также особая форма импорта - статический импорт. Для этого вместе с директивой import используется модификатор static:
Например, import static java.lang.Math.*;
Этот класс имеет статические методы.
Благодаря операции статического импорта можно использовать эти методы без названия класса.
Например, писать не Math.sqrt(45), а sqrt(45), так как метод sqrt(), который возвращает квадратный корень числа, является статическим.

--------------------------- Объектно Ориентированный Подход)------------------------------------------------------------

ООП (объектно ориентированный подход)
— методология программирования, основанная на представлении программы в виде совокупности объектов!!!,
каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования

Основные парадигмы ООП
1) Инкапсуляция
Сокрытие реализации программных частей для безопасности. В качестве примера машина без корпуса (инкапсуляции) и с корпусом. Создавая свойства и методы не делайте их сразу public, делайте их открытыми только тогда, когда это нужно или если это было сразу так задумано. Паблик свойства вообще не желательны.

2) Наследование
Наследование это создание нового объекта на основании старого. Создание нового класса на основании старого.

3) Полиморфизм
Возможность дополнять объект функционалом. Возможность выступать объекту в разных формах. Классический полиморфизм - замещение, переопределение методов. ad hoc полиформизм - перегрузка методов, поведение в зависимости от данных. Подмена объектов во время выполнения программы с одинаковыми методами через интерфейс.

4) Абстракция
Абстракция - В ООП это придание объекту характеристик, которые четко выделяет его на фоне остальных, определяя его концептуальные границы. Абстрагирование - В ООП это способ выделить набор значимых характеристик объекта, исключая из рассмотрения не значимые. Соответственно абстракция это набор таких характеристик.

5) Посылка сообщений
Посылка сообщения это вызов метода. Так же события и их обработчики.

6) Повторное использование
Все что перечислено выше работает на повторное использование кода.

Объект это сущность, которая хранит в себе состояние и поведение. Должно быть соответствие между состоянием объекта и его поведением.

Объект должен делать только то, что на него возложено и ему соответствует.


--------------------------- Модификаторы доступа - Инкапсуляция------------------------------------------------------------
В самом начале объявления поля или метод указывается модификатор доступа к полю ( private , protected  или public ),
либо не указывается, и тогда используется доступ по умолчанию package-private.

Затем  тип поля и имя.
Затем поле может сразу инициализироваться начальным значением

Поле или метод с модификатором доступа private будет доступно только внутри этого класса.
Поле без модификаторов доступа будет использовать уровень доступа package-private (поле будет доступно только внутри своего пакета).

Поле или метод с модификатором доступа protected будет доступно
в этом пакете,
этом классе и классах наследниках от этого класса.

Поле или метод с модификатором доступа public будет доступно во всех классах всех пакетов.

Рекомендуется давать всем полям класса самый минимальный из возможных уровней доступа, что означает,
что большинство полей класса должны иметь уровень доступа private. Остальные уровни доступа должны даваться отдельным переменным только в том случае, если это действительно нужно.

Прямое обращение к полю другого класса является плохим стилем, поскольку оно нарушает принципы ООП.
Все обращения должны происходить к методам, которые уже сами меняют значения полей в соответствии с заложенной в них логике (сеттеры и геттеры).

Сгенерировать необходимые сеттеры и геттеры для объявленных полей можно с помощбю idea - alt + insert

--------------------------- Наследование------------------------------------------------------------

Наследование в Java — механизм, позволяющий создать новый класс из существующих классов, расширив его функционал
1. Ключевое слово extends используется в Java для реализации наследования.
2. Private-члены суперкласса недоступные для подклассов.
Остальные члены суперкласса доступны для подклассов, методы суперкласса можно расширить или полностью переопределить в дочернем классе
3. Подкласс с уровнем доступа default (по умолчанию) доступен другим подклассам только если они находятся в том же пакете!
4. Конструкторы суперкласса не наследуются подклассами.
5. Если суперкласс не имеет конструктора по умолчанию, то подкласс должен иметь явный конструктор.
6. Java не поддерживает множественное наследование, поэтому подкласс может наследовать только один класс!

Примеры:
пакет animals, baseAnimals
пакет calculator