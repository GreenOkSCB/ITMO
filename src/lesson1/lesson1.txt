Java — строго типизированный, объектно-ориентированный язык программирования общего назначения,
основанный на принципе «write once, run everywhere».

Релиз версии 1.0 состоялся 23 мая 1995 года,
релиз последней версии — 21 сентября 2017 года (Java SE 9).

Трансляция программы — преобразование программы, представленной на одном из языков программирования, в программу на другом языке.

Язык, на котором представлена входная программа, называется исходным языком,
а сама программа — исходным кодом.
Выходной язык называется целевым языком,
а выходная (результирующая) программа — объектным кодом.

Цель трансляции — преобразование текста с одного языка на язык, понятный адресату.
При трансляции компьютерной программы адресатом может быть:
устройство — процессор (трансляция называется компиляцией);
программа — интерпретатор (трансляция называется интерпретацией).

Компилятор — транслятор, преобразующий исходный код с какого-либо языка программирования на машинный язык.
Интерпретация — процесс чтения и выполнения исходного кода. Реализуется программой — интерпретатором.

Выполнение программы на Java:
1. исходный код Java программы сохраняется в файл с расширением .java
Имя публичного класса должно совпадать с именем файла, учитывая регистр
2. компиляция его в файл с расширением .class
Если нет синтаксических ошибок, компилятор генерирует файл байткода с расширением .class
3. Выполнение Java программы - запуск байткода программы.
Байткод похож на машинные инструкции и может запускаться на любой платформе, которая имеет виртуальную машину Java – Java Virtual Machine (JVM).

В отличие от физической машины, виртуальная машина – это программа, которая интерпретирует байткод Java.
Переводит отдельные инструкции байткода в целевой машинный языковой код.
Это делается последовательно – одна инструкция за раз, а не вся программ за один присест.
Каждый шаг немедленно выполняется, сразу после перевода.

Когда выполняется Java программа, JVM начинает с загрузки байткода класса в память, используя программу под названием загрузчик классов (class loader).
Если ваша программа использует другие классы, загрузчик классов динамически подгружает их перед тем, как они понадобятся.
После загрузки класса, JVM использует программу под названием контролёр байткода (bytecode verifier) для проверки правильности байткода и проверки,
что байткод не нарушает ограничений безопасности Java. Java обеспечивает строгую защиту, чтобы убедиться,
что файлы классов Java не подделаны и не вредят вашему компьютеру.


JVM - Java Virtual Machine - среда ("виртуальная"), в которой выполняется твой скомпилированный код
JRE - Java Runtime Environment. Пакет, который включает в себя JVM и минимальный набор библиотек для работы программ.
И еще браузерный плагин, где будут выполняться апплеты.
JDK- Java Development Kit - это уже полноценный набор библиотек и инструментов для для создания, компилирования и дебага программ.
Включает в себя JRE

Переменные Java:
В языке Java все переменные должны быть объявлены, перед тем, как они будут использоваться.

Правила именования переменных в java:

Имя переменной должно начинаться с буквы (маленькой)
и состоять из букв (Unicode) цифр и символа подчеркивания «_».
Технически возможно начать имя переменной также с «$» или «_», однако это запрещено соглашением по оформлению кода в Java (Java Code Conventions).
Кроме того, символ доллара «$», по соглашению, никогда не используется вообще.
В соответствии с соглашением имя переменной должно начинаться именно с маленькой буквы (с заглавной буквы начинаются имена классов).
Пробелы при именовании переменных не допускаются.

Имя переменной не должно быть ключевым или зарезервированным словом языка Java.

Имя переменной чувствительно к регистру.

При выборе имени переменных, следует использовать полные слова.

Если имя переменной состоит из более чем одного слова, то отделяйте каждое последующее слово в имени переменной заглавной буквой.


Типы данных:
Примитивные типы данных
1) byte (целые числа, 1 байт)
2) short (целые числа, 2 байта)
3) int (целые числа, 4 байта)
4) long (целые числа, 8 байтов)
5) float (вещественные числа, 4 байта)
6) double (вещественные числа, 8 байтов)
7) char (символ Unicode, 2 байта)
8) boolean (значение истина/ложь, 1 байт)

Ссылочные типы данных
В ссылочные типы входят все классы, интерфейсы, массивы.
Тип String также относится к ссылочным типам.

Также существуют классы-оболочки для примитивов:
1) Byte
2) Short
3) Integer
4) Long
5) Float
6) Double
7) Character
8) Boolean
В отличие от примитивных типов, они пишутся с заглавной буквы.
Эти типы соответствуют примитивным типам, однако являются ссылочными.
Их классы cодержат методы для преобразования типов,
а также другие константы и методы полезные при работе с примитивными типами данных.

Все операторы Java можно разделить на следующие группы:
1) арифметические операторы;
2) операторы сравнения;
3) побитовые операторы;
4) логические операторы;
5) операторы присваивания и тд

Арифметические опраторы:
+, -, *, /, %
-- декремент - уменьшение на 1
++ инкремент - увеличение на 1

Операторы сравнения - возвращают, либо true, либо false:
< > <= >= == !=

Логические операторы:
&&	логический оператор «И». Если оба операнда являются не равны нулю, то условие становится истинным
||	логический оператор «ИЛИ».
Если любой из двух операндов не равен нулю, то условие становится истинным
! логический оператор «НЕ». Использование меняет логическое состояние своего операнда.

Операторы присваивания:
=	присваивает значения из правой стороны операндов к левому операнду		C = A + B, присвоит значение A + B в C
+=	прибавляет и присваивает левому операнду значения правого C += A, эквивалентно C = C + A
-=	вычитает и присваивает из правого операнда левый операнд C -= A, эквивалентно C = C - A
*=	умножает и присваивает правый операнд на левый операнд	C * = A эквивалентно C = C * A
/=	делит и присваивает левый операнд на правый операнд C /= A эквивалентно C = C / A
%=	принимает модуль с помощью двух операндов и присваивает его результат левому операнду C %= A, эквивалентно C = C % A

Тернарный оператор -
состоит из трех операндов и используется для оценки выражений типа boolean.
Цель тернарного оператора заключается в том, чтобы решить, какое значение должно быть присвоено переменной.
Оператор записывается в виде:

переменная x = (условие) ? значение1 if true : значение2 if false
















