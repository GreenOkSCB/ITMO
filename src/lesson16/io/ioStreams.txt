Класс File
работает непосредственно с файлами.
Данный класс позволяет получить информацию о файле:
права доступа,
время и дата создания,
путь к каталогу,
осуществлять навигацию по иерархиям подкаталогов.

Класс java.io.File может представлять имя определённого файла, а также имена группы файлов, находящихся в каталоге.
Если класс представляет каталог, то его метод list() возвращает массив строк с именами всех файлов.

Конструкторы.
    File(File dir, String name) - указывается объекта класса File (каталог) и имя файла
    File(String path) - указывается путь к файлу без указания имени файла
    File(String dirPath, Sring name) - указывается путь к файлу и имя файла
    File(URI uri) - указывается объекта URI, описывающий файл

Методы класса File
    getAbsolutePath() - абсолютный путь файла, начиная с корня системы. В Android корневым элементом является символ слеша (/)
    canRead() - доступно для чтения
    canWrite() - доступно для записи
    exists() - файл существует или нет
    getName() - возвращает имя файла
    getParent() - возвращает имя родительского каталога
    getPath() - путь
    lastModified() - дата последнего изменения
    isFile() - объект является файлом, а не каталогом
    isDirectory - объект является каталогом
    isAbsolute() - возвращает true, если файл имеет абсолютный путь
    renameTo(File newPath) - переименовывает файл. В параметре указывается имя нового имени файла. Если переименование прошло неудачно, то возвращается false
    delete() - удаляет файл. Также можно удалить пустой каталог

Каталог
 - это объект класса File, который содержит список других файлов и каталогов.
 После создания объекта класса File, являющего каталогом, его метод isDirectory() вернёт значение true.
 И тогда можно вызывать метод list().

Для создания каталога можно использовать метод mkdir(), который вернёт true в успешном случае.
Если указанный путь уже существует или каталог нельзя создать из-за отсутствия полного пути к нему, то вернётся false.

Список каталогов
Получить содержимое каталога - метод list() без аргументов - вернётся массив имён файлов и каталогов, содержащихся в данном каталоге.
Метод listFiles() - возвращает массив файлов (объектов)


Поток - это абстрактное значение источника или приёмника данных, которые способны обрабатывать информацию.
Есть два типа потоков:
байтовые
символьные.
В некоторых ситуациях символьные потоки более эффективны, чем байтовые.

За ввод и вывод отвечают разные классы Java.
Потоки байт
OutputStream - это абстрактный класс, определяющий потоковый байтовый вывод.
Методы класса:
    int close() - закрывает выходной поток. Следующие попытки записи передадут исключение IOException
    void flush() - финализирует выходное состояние, очищая все буферы вывода
    abstract void write (int oneByte) - записывает единственный байт в выходной поток
    void write (byte[] buffer) - записывает полный массив байтов в выходной поток
    void write (byte[] buffer, int offset, int count) - записывает диапазон из count байт из массива, начиная с смещения offset

BufferedOutputStream Буферизированный выходной поток для повышения производительности.

ByteArrayOutputStream использует байтовый массив в выходном потоке.

DataOutputStream Выходной поток, включающий методы для записи стандартных типов данных Java
Класс DataOutputStream расширяет класс FilterOutputStream, который в свою очередь, расширяет класс OutputStream.
Методы интерфейса DataOutput:
    writeDouble(double value)
    writeBoolean(boolean value)
    writeInt(int value)

FileOutputStream Отправка данных в файл на диске.
Создание нового объекта не зависит от того, существует ли заданный файл, так как он создаёт его перед открытием.
В случае попытки открытия файла, доступного только для чтения, будет передано исключение.

ObjectOutputStream Выходной поток для объектов
PipedOutputStream Реализует понятие выходного канала.
FilterOutputStream Абстрактный класс, предоставляющий интерфейс для классов-надстроек, которые добавляют к существующим потокам полезные свойства.

Классы символьных потоков
Символьные потоки имеют два основных абстрактных класса Reader и Writer, управляющие потоками символов Unicode.

Методы класса Reader:
    abstract void close() - закрывает входной поток. Последующие попытки чтения передадут исключение IOException
    void mark(int readLimit) - помещает метку в текущую позицию во входном потоке
    boolean markSupported() - возвращает true, если поток поддерживает методы mark() и reset()
    int read() - возвращает целочисленное представление следующего доступного символа вызывающего входного потока. При достижении конца файла возвращает значение -1. Есть и другие перегруженные версии метода
    boolean ready() - возвращает значение true, если следующий запрос не будет ожидать.
    void reset() - сбрасывает указатель ввода в ранее установленную позицию метки
    logn skip(long charCount) - пропускает указанное число символов ввода, возвращая количество действительно пропущенных символов

BufferedReader Буферизированный входной символьный поток
CharArrayReader Входной поток, который читает из символьного массива
FileReader Входной поток, читающий файл
FilterReader Фильтрующий читатель
InputStreamReader Входной поток, транслирующий байты в символы
LineNumberReader Входной поток, подсчитывающий строки
PipedReader Входной канал
PushbackReader Входной поток, позволяющий возвращать символы обратно в поток
Reader Абстрактный класс, описывающий символьный ввод
StringReader Входной поток, читающий из строки

