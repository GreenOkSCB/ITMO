----------------------------Интерфейсы-------------------------------

Интерфейсы, кроме JDK, используются еще и в шаблонах проектирования,  множестве различных инструментах и фреймворках.
Интерфейсы обеспечивают абстракцию в Java.

1. interface — ключевое слово для создания интерфейса.
2. Создать экземпляр интерфейса в Java нельзя.
3. Интерфейс обеспечивает абсолютную абстракцию.
4. Интерфейсы не могут иметь конструкторов.
5. По умолчанию любой атрибут интерфейса является public, static и final
6. По умолчанию методы интерфейса неявно abstract и public (не имеют реализации)
private доступен, начиная с Java 9
static методы с реализацией, начиная с Java 8
default методы с реализацией, начиная с Java 8 (можно не переопределять)
7. Интерфейс может реализовать другой интерфейс. public interface Figures extends SomeInterface{} - пример интерфейса, который наследует другой интерфейс.
На самом деле Java обеспечивает множественное наследование интерфейсов — это означает, что интерфейс может наследовать несколько интерфейсов.
8. Ключевое слово implements используется классами для реализации интерфейса.
9. Класс, реализующий интерфейс, должен обеспечить реализацию всех его метода, если только это не абстрактный класс

Например, нужно создать различные фигуры, которые обязательно! должны сообщать свою площать
Помимо того, что можно просто создать отдельные фигуры, лучше создать интерфейс Figure и определить методы для работы.
После этого добавлять классы конкретных фигур, которые будут реализовавать данный итерфейс.
При этом мы будем точно уверены, что не забудем описать необходимый метод. Пакет - figures

Интерфейс обеспечивает контракт для всех классов, которые реализуют интерфейс.
Интерфейсы хороши для создания начальной точки и создания иерархии в проекте.

----------------------------Функциональные интерфейсы-------------------------------

Интерфейс с одним абстрактным методом является функциональным интерфейсом.

В Java 8 была введена новая аннотация @FunctionalInterface для обозначения интерфейса, функциональным интерфейсом.
Новая аннотация @FunctionalInterface  добавляется для того, чтобы избежать случайного добавления абстрактных методов в функциональный интерфейс.
Она не обязательна, но является хорошей практикой написания кода.

Функциональные интерфейсы позволяют использовать лямбда-выражения для создания экземпляра таких интерфейсов.

----------------------------Абстрактный класс-------------------------------
Абстрактные классы используются, чтобы создать класс с реализацией метода по умолчанию для подклассов.
Абстрактный класс может иметь как абстрактные методы (не имеют реализации), так и методы с реализацией.

1. Abstract  — ключевое слово при объявлении класса.
Чтобы создать абстрактный класс, нужно дописать ему ключевое слово abstract при объявлении класса.
2. Нельзя создать экземпляр абстрактного класса.
3. Если в классе есть абстрактные методы, то класс также должен быть объявлен абстрактным с помощью ключевого слова abstract
4. Если в абстрактном классе нет ни одного метода с хоть какой-то реализацией, то лучше использовать интерфейс
5. Подкласс абстрактного класса должен реализовать все абстрактные методы, если подкласс сам не является абстрактным классом.
6. Абстрактные классы могут реализовывать интерфейсы, даже не обеспечивая реализацию методов интерфейса.
6. Абстрактные классы являются базой для подклассов,
которые реализуют абстрактные методы и переопределяют или используют реализованные методы абстрактного класса.

Пример использования абстрактного класса - пакет battle


