Сериализация объекта
это способность объекта сохранять полную копию его и любых других объектов на которые он ссылается,
используя поток вывода (например, во внешний файл).

Таким образом, объект может быть воссоздан из сериализованной(сохраненной) копии немного позже, когда это потребуется.

Сериализация — процесс перевода какой-либо структуры данных в последовательность битов.
Обратной к операции сериализации является операция десериализации (структуризации)
— восстановление начального состояния структуры данных из битовой последовательности.
Сериализация используется для передачи объектов по сети и для сохранения их в файлы.

Сериализация в Java обеспечивается такими потоками как:
java.io.ObjectInputStream и java.io.ObjectOutputStream
и  методами соответственно readObject() и writeObject().


Сериализация не читает и не присваивает значения полям, которые не реализуют интерфейс java.io.Serializable.

Сериализуемый класс должен реализовывать интерфейс - маркер java.io.Serializable.
Он называется маркером, т. к. не имеет методов, а только отмечает данный класс как сериализуемый

Запись объекта называется сериализацией.
Чтение объекта называется десериализацией.

Поля, объявленные как transient  или static, игнорируются в процессе сериализации/десериализации.

При десериализации всегда создаются новые объекты, чтобы защитить уже существующие объекты от изменения.

В процессе чтения объекты создаются аналогично выполнению конструктора для нового объекта.
Сначала выделяется память и заполняется нулями. Для несериализуемых классов вызываются конструкторы по умолчанию,
а поля сериализуемых классов считываются из потока,
начиная от наиболее близкого к java.lang.Object  класса и заканчивая наиболее специфичным классом.

Любое исключение в процессе десериализации перехватывается ObjectInputStream -ом и останавливает процесс чтения.

Реализация интерфейса Externalizable  позволяет полностью контролировать содержимое и формат сериализации.
Методы void writeExternal(ObjectOutput out) throws IOException  и void readExternal(ObjectInput in)
вызываются при сохранении и восстановлении состояния объектов.
ри реализации каким-нибудь классом они могут записывать и считывать своё состояние с помощью методов ObjectOutput  и ObjectInput.
Ответственность за обработку версионности ложится на сам объект.

Десериализация констант перечислений отличается от обычной сериализации и десериализации объектов.
Сериализованная форма констант содержит только и имена, Значения полей констант опускаются.

Статическое поле serialVersionUID  означает версию класса:
static final long serialVersionUID = 42L;

Если в сериализуемом классе не объявлено поля serialVersionUID, то его значение вычисляется автоматически на основе окружения и полей класса.
При чтении класса проверяется serialVersionUID. Если serialVersionUID  считываемого класса не равен serialVersionUID  нашего класса,
то возникает исключение java.io.InvalidClassException. Старайтесь всегда объявлять вручную serialVersionUID,
так как автоматически вычисленное значение может сильно отличаться в зависимости от платформы и реализации.








