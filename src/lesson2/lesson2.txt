Ветвления Java -
 это конструкция языка программирования,
 обеспечивающая выполнение определённой команды или набора команд только при условии истинности некоторого логического выражения,
 либо выполнение одной из нескольких команд (наборов команд) в зависимости от значения некоторого выражения.

Операторы ветвления:
if / if ... else
Оператор if начинается с ключевого слова if.
Ключевое слово if должно сопровождаться булевым выражением, заключённым в скобки.
Если условие истинно, то оператор или группа операторов выполняется, если ложно, то оператор не выполняется.
Например:
if (условие) {оператор}  // если условие истинно, то выполняется оператор

if (условие) {
    оператор;  // если условие истинно, то выполняется первый оператор
}  else {      // если условие ложно, то выполняется оператор после else
    оператор;
}

Обе части оператора if и else не могут выполняться одновременно.

Цепочка операторов if...else if
Условные выражения оцениваются сверху вниз. Как только найдено условие, принимающее значение true, выполняется ассоциированный с этим условием оператор,
а остальная часть цепочки пропускается. Если ни одно из условий не принимает значение true, то выполняется последний оператор else,
который можно рассматривать как оператор по умолчанию.
Если же последний оператор else отсутствует, а все условные выражения принимают значение false, то программа не выполняет никаких действий.


Switch (оператор выбора)

switch(Выражение) {
    case Совпадение1:
	    команда;
		break; - прерывание switch
	case Совпадение2:
	    команда;
		break;
	case Совпадение3:
	    команда;
		break;
	case Совпадение4:  - объединение кейсов
	case Совпадение5:
	    команда;
    	break;
	default:
	    оператор;
	    break;
}

Циклы
— это многократно повторяющийся фрагмент программы.
while	Повторяет оператор или группу операторов, пока заданное условие является true. Цикл проверяет условие до выполнения тела цикла.
while(Логическое выражение)
{
   //Операторы
}

В условие может быть любое выражение, true(истинна) или любое не нулевое значение.
При выполнении, если результат логического выражения true,
то действия внутри цикла будет выполняться. Это будет продолжаться до тех пор, пока результат выражения истинна.
Когда условие становится ложным, программа передаёт управление на строчку сразу после цикла.

for	Выполняет последовательность операторов несколько раз и сокращает код, которым управляет переменная цикла.
for(инициализация; логическое выражение; обновление)
{
   //Операторы
}

Процесс управления в цикле:
1) Стадия инициализации выполняется первой, и только один раз. Этот шаг позволяет объявлять и инициализировать любые переменные для управления циклом,
и он заканчивается точкой с запятой(;).
2) Далее логическое выражение. Если истинно, то тело цикла выполняется,
если оно ложно, тело цикла не будет выполнено и контроль переходит к следующему оператору мимо цикла.
3) После того как тело из цикла for запускается на выполнение, контроль переходит обратно к оператору обновления.
Он позволяет обновлять какие-либо переменные для управления циклом, и записывается без точки с запятой в конце.
4) Логическое выражение теперь оценивается снова.
Если истинно, то цикл выполняется и процесс повторяется. Если ложно, то цикл for завершается.

do...while	Выполняется цикл while, за исключением того, что он проверяет условия в конце тела цикла.
do
{
   //Операторы
} while(логическое выражение);

Логическое выражение в конце цикла, так что операторы в цикле выполнятся один раз, прежде чем пройдут проверку на логическое условие.
Если логическое выражение истинно, контроль переходит обратно, чтобы выполнить операторы, и они в цикле выполняются снова.
Этот процесс повторяется до тех пор, пока логическое выражение не станет ложным.

Операторы цикла
 — изменяют нормальное выполнение последовательности цикла в Java.
Когда выполнение выходит из своей области, все объекты, которые были созданы автоматически в этой области будут уничтожены.

Оператор break
Когда оператор break встречается внутри цикла, то цикл прерывается, а управление программой возобновляется со следующего оператора.
Он может быть использован для прекращения case в операторе switch

Оператор continue
— ключевое слово, которое может быть использовано в любой структуре цикла, и оно призывает цикл сразу же перейти к следующей итерации.

